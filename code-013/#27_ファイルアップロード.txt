#27 ファイルアップロード


・indexにuploadリンクを追加
<li><?= $this->Html->link(__('Upload Users'), ['action' => 'upload']) ?></li>

・テンプレートを追加
<fieldset>
    <?= $this->Form->create('', ['name' => 'upload_form', 'type' => 'file']); ?>
        <div>
            <?= $this->Form->label(__('Please select an upload file.')) ?>
        </div>
        <div>
            <?= $this->Form->file('upload_file', ['id' => 'upload_file']) ?>
            <?= $this->Form->button(__("upload"), ['onClick' => 'upload()', 'type' => 'button']); ?>
        </div>
    <?= $this->Form->end() ?>
        <?php if (isset($errors)): ?>
       <div>
            <?php foreach($errors as $error): ?>
                <div><?= empty($error['LINE_NO']) ? $error['DESCRIPTION'] : 'L'.$error['LINE_NO'].' : '.$error['DESCRIPTION'] ?></div>
            <?php endforeach; ?>
        </div>
        <?php endif ?>
</fieldset>
<script type="text/javascript">
    function upload() {
        if(document.getElementById("upload_file").files.length == 0) {
            alert("<?= __('upload File Not selected.') ?>");
        }
        else {
            if (!confirm("<?= __('Are you sure you want to upload file?') ?>")) {
                return false;
            }
            document.upload_form.submit();
        }
    }
</script>


・uploadメソッドを追加

/**
     * ユーザーデータファイルを取込みデータベースに保存します。。
     */
    public function upload()
    {
        if ($this->request->is('post')) {
            // ファイルの拡張子がcsv以外の場合はファイル形式エラーとする。
            if (mb_strtolower(pathinfo($_FILES['upload_file']['name'], PATHINFO_EXTENSION)) !='csv') {
                $this->Flash->error(__('The file format is invalid.'));
                return;
            }
            
            // ファイル読込み準備
            $uploadFile = $_FILES['upload_file']['tmp_name'];
            file_put_contents($uploadFile, mb_convert_encoding(file_get_contents($uploadFile), 'UTF-8', 'SJIS'));
            $file = new SplFileObject($uploadFile);
            $file->setFlags(SplFileObject::READ_CSV);
            
            $new_users = array();   // データを入れておく配列
            $errors = array();      // エラーを入れておく配列
            
            foreach ($file as $rowIndex => $line) {
                if ($rowIndex < 1) {
                    // 1行目はヘッダー行なので読み飛ばします。
                    continue;
                }
                
               // 項目数が合わない場合は項目数エラーを記録し次の行を処理します。
               // 最終行が空の場合はスルーします。
               if (count($line) != 5) {
                    if ($file->valid() || ($file->eof() && !empty($line[0]))) {
                        $errors = $this->setError($errors, $rowIndex, __('The number of items is invalid.'));
                    }
                } else {
                    // 取り込んだCSVデータ行からユーザーデータ配列を作成します。
                    $arrUser = $this->createUserArray($line);
                    // ユーザーデータの配列をユーザーエンティティにパッチします。
                    // このタイミングでValidationが行われます。
                    $user = $this->Users->newEntity($arrUser);
                    
                    // Validationでエラーがあった場合、エンティティにエラーがセットされるので
                    // 最後にエラー一覧を表示するため、エラーがある場合は別で保存しておきます。
                    $entityErrors = $user->getErrors();
                    foreach($entityErrors as $key=>$value) {
                        if (is_array($value)) {
                            foreach($value as $rule=>$message) {
                                $errors = $this->setError($errors, $rowIndex, $message);
                            }
                        }
                    }
                    // Validationエラーが無かった場合は、一括保存のために配列にいれておきます。
                    if (empty($errors)) {
                        array_push($new_users, $user);
                    }
                }
            }

            // エラーが無かった場合データを保存し一覧画面に遷移します。
            // エラーがあった場合はファイル選択画面に遷移しエラー内容を表示します。
            if (!$errors) {
                // ユーザーデータを登録する
                if ($this->Users->saveMany($new_users)) {
                    $this->Flash->success(__('The user has been saved.'));
                    return $this->redirect(['action' => 'index']);
                }
                // データセーブのタイミングでユーザーテーブルのbuildRulesメソッドでのチェックが行われます。
                // buildRulesメソッドでエラーがあった場合、もしくはデータベースの保存時にエラーが発生した場合は
                // このエラーメッセージが表示されます。
                $this->Flash->error(__('The user could not be saved. Please, try again.'));
            } else {
                // ファイルアップロード画面にエラー内容を渡します。
                $this->Flash->error(__('Contains incorrect data. Please check the message, correct the data and upload again.'));
                $this->set(compact('errors'));
            }
        }
    }

    /**
     * ユーザーデータ取り込みcsvデータの1行から、1件のユーザーデータ配列を作成します。
     * @param [array] $line csvの行データ配列
     * @return ユーザーデータ配列
     */
    private function createUserArray($line)
    {
        $arr = array();
        $arr['account'] = $line[0];
        $arr['password'] = $line[1];
        $arr['name'] = $line[2];
        $arr['email'] = $line[3];
        $arr['tel'] = $line[4];

        return $arr;
    }
    
    /**
     * エラー情報をエラー蓄積用配列にセットし返します。
     * @param  [array] $errors エラー蓄積用配列
     * @param  [int] $rowIndex エラー発生行番号（行番号を表示したくない場合は空文字可）
     * @param  [array] $description エラーメッセージ
     * @return エラー蓄積用配列
     */
    private function setError($errors, $rowIndex, $description) {
        $error = array();
        empty($rowIndex) ? $error['LINE_NO'] = '' :  $error['LINE_NO'] = $rowIndex + 1;
        $error['DESCRIPTION'] =  $description;
        array_push($errors, $error);
        
        return $errors;
    }

・useを追加
use \SplFileObject;
