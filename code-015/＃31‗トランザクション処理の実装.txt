#31トランザクション処理の実装

■ユーザー変更ログテーブルを作成する
CREATE TABLE `user_change_logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `action` varchar(45) NOT NULL,
  `before_value` text NOT NULL,
  `after_value` text NOT NULL,
  `modified` timestamp NOT NULL DEFAULT current_timestamp(),
  `modified_user` varchar(45) DEFAULT NULL,
  `created` timestamp NOT NULL DEFAULT current_timestamp(),
  `created_user` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


■editメソッドの改造
    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $this->editOrigin($id);
        // $this->editInTransaction($id);
        // $this->editInClosure($id);
    }

■editメソッドで呼び出されているメソッド

     /**
     * トランザクション処理をしないデータ編集
     */
    public function editOrigin($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $result = true;

            // ユーザー変更履歴を生成する
            $this->loadModel('UserChangeLogs');
            $userChangeLog = $this->UserChangeLogs->newEntity();
            $userChangeLog->action = 'edit';
            $userChangeLog->before_value = serialize($user);
            $userChangeLog->modified_user = $this->Auth->user('account');
            $userChangeLog->created_user = $this->Auth->user('account');

            $user = $this->Users->patchEntity($user, $this->request->getData());
            $userChangeLog->after_value = serialize($user);

            // ユーザーデータの保存
            if ($this->Users->save($user)) {
                $this->Flash->success(__('ユーザーを保存しました。'));
            } else {
                $this->Flash->error(__('Tユーザーが保存できませんでした。'));
                $result = false;
            }

            // ユーザー変更ログの保存
            if ($this->UserChangeLogs->save($userChangeLog)) {
                $this->Flash->success(__('ユーザー変更ログを保存しました。'));
            } else {
                $this->Flash->error(__('ユーザー変更ログが保存できませんでした。'));
                $result = false;
            }

            // エラーが無ければ一覧画面に遷移する
            if ($result) {
                return $this->redirect(['action' => 'index']);
            }
        }
        $this->set(compact('user'));
    }

    /**
     * トランザクション処理をするデータ編集　其の１
     */
    public function editInTransaction($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $result = true;

            // ユーザー変更履歴を生成する
            $this->loadModel('UserChangeLogs');
            $userChangeLog = $this->UserChangeLogs->newEntity();
            $userChangeLog->action = 'edit';
            $userChangeLog->before_value = serialize($user);
            $userChangeLog->modified_user = $this->Auth->user('account');
            $userChangeLog->created_user = $this->Auth->user('account');

            $user = $this->Users->patchEntity($user, $this->request->getData());
            $userChangeLog->after_value = serialize($user);

            // トランザクション開始
            $conn = $this->Users->getConnection();
            $conn->begin();

            // ユーザーデータの保存
            if ($this->Users->save($user)) {
                $this->Flash->success(__('ユーザーを保存しました。'));
            } else {
                $this->Flash->error(__('ユーザーが保存できませんでした。'));
                $result = false;
            }

            // ユーザー変更ログの保存
            if ($this->UserChangeLogs->save($userChangeLog)) {
                $this->Flash->success(__('ユーザー変更ログを保存しました。'));
            } else {
                $this->Flash->error(__('ユーザー変更ログが保存できませんでした。'));
                $result = false;
            }

            // エラーが無ければ一覧画面に遷移する
            if ($result) {
                $conn->commit();
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('ユーザーとユーザー変更ログの両方の保存が成功しなかったためロールバックしました。'));
                $conn->rollback();
            }
        }
        $this->set(compact('user'));
    }
